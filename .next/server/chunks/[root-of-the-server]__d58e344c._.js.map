{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/alan/CodeTeak/AttendanceTracker/codeTeakMonitor/codeTeak-MonitorApp/src/app/api/create-user/route.ts"],"sourcesContent":["export const runtime = \"nodejs\";\nimport { NextRequest, NextResponse } from 'next/server';\nimport * as admin from 'firebase-admin';\nimport serviceAccount from '../../../../serviceAccountKey.json'; // Do NOT commit this file to git!\n\n// Initialize Firebase Admin if not already initialized\nif (!admin.apps.length) {\n  admin.initializeApp({\n    credential: admin.credential.cert(serviceAccount as admin.ServiceAccount),\n  });\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    // Optionally, check if the requester is an employer (admin) here\n    // For now, assume only employer can access this endpoint\n    const { name, email, password } = await req.json();\n    if (!name || !email || !password) {\n      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });\n    }\n\n    // Create user in Firebase Auth\n    const userRecord = await admin.auth().createUser({\n      email,\n      password,\n      displayName: name,\n    });\n\n    // Add user to Firestore with role 'employee'\n    await admin.firestore().collection('users').doc(userRecord.uid).set({\n      id: userRecord.uid,\n      name,\n      email,\n      role: 'employee',\n      status: 'Clocked Out',\n      accumulatedTimeToday: 0,\n      currentSessionStart: null,\n      loggedTasks: [],\n      assignedTasks: [],\n      totalHours: 0,\n    });\n\n    return NextResponse.json({ success: true, uid: userRecord.uid });\n  } catch (error: any) {\n    return NextResponse.json({ error: error.message }, { status: 500 });\n  }\n} "],"names":[],"mappings":";;;;AACA;AACA;;;;;;AAFO,MAAM,UAAU;;;;AAKvB,uDAAuD;AACvD,IAAI,CAAC,2HAAA,CAAA,OAAU,CAAC,MAAM,EAAE;IACtB,CAAA,GAAA,2HAAA,CAAA,gBAAmB,AAAD,EAAE;QAClB,YAAY,2HAAA,CAAA,aAAgB,CAAC,IAAI,CAAC;IACpC;AACF;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,iEAAiE;QACjE,yDAAyD;QACzD,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAChD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA0B,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,+BAA+B;QAC/B,MAAM,aAAa,MAAM,CAAA,GAAA,2HAAA,CAAA,OAAU,AAAD,IAAI,UAAU,CAAC;YAC/C;YACA;YACA,aAAa;QACf;QAEA,6CAA6C;QAC7C,MAAM,CAAA,GAAA,2HAAA,CAAA,YAAe,AAAD,IAAI,UAAU,CAAC,SAAS,GAAG,CAAC,WAAW,GAAG,EAAE,GAAG,CAAC;YAClE,IAAI,WAAW,GAAG;YAClB;YACA;YACA,MAAM;YACN,QAAQ;YACR,sBAAsB;YACtB,qBAAqB;YACrB,aAAa,EAAE;YACf,eAAe,EAAE;YACjB,YAAY;QACd;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM,KAAK,WAAW,GAAG;QAAC;IAChE,EAAE,OAAO,OAAY;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnE;AACF","debugId":null}}]
}